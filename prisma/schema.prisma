generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Share {
    id         String   @id @default(cuid())
    ownerId String
    owner User?    @relation(fields: [ownerId], references: [id])
    sharedWith String[]
}


model Tag {
  id         String   @id @default(cuid()) @unique
  value      String 
  valId String @unique
  type      String
  ownerId     String 
  owner       User?    @relation(fields: [ownerId], references: [id]) 
  links Link[]
}

model Link {
  id         String   @id @default(cuid()) @unique
  title      String
  url        String?
  ownerId    String
  owner      User?    @relation(fields: [ownerId], references: [id])
  tags Tag[]
}

model History {
  id         String   @id @default(cuid())
  linkId  String
  timestamp String 
  ownerId     String
  owner       User?    @relation(fields: [ownerId], references: [id])
}

//auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  links         Link[]
  history       History[]
  tags          Tag[]
  share         Share[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
