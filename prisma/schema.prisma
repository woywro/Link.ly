generator client {
  provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id         String   @id @default(cuid()) @unique
  value      String 
  valId String @unique
  ownerId     String 
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade) 
  links Link[]
  shareRequests ShareRequest[]
}

model Link {
  id         String   @id @default(cuid()) @unique
  title      String
  url        String?
  ownerId    String
  modificationTimestamp String
  owner      User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collections Collection[]
  history History[]
}

model History {
  id         String   @id @default(cuid())
  linkId  String
  link  Link? @relation(fields: [linkId], references: [id])
  timestamp String 
  ownerId     String
  owner       User?    @relation(fields: [ownerId], references: [id])
}

model ShareRequest {
  id String @id @default(cuid()) @unique
  ownerId     String
  owner       User?    @relation(fields: [ownerId], references: [id], name: "owner", onDelete: Cascade)
  receiverEmail String
  receiver User?    @relation(fields: [receiverEmail], references: [email], name: "receiver", onDelete: Cascade)
  collectionId String
  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  isAccepted Boolean @default(false)
  createdTimestamp String
  idEmail String @unique
}

//auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  links         Link[]
  history       History[]
  collections          Collection[]
  shares         Share[]
  shareRequestsReceived ShareRequest[] @relation(name: "receiver")
  shareRequestsSent ShareRequest[] @relation( name: "owner")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
